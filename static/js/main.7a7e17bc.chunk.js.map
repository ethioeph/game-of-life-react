{"version":3,"sources":["index.js"],"names":["Square","props","cellColor","value","className","onClick","Board","i","this","squares","list","push","style","display","gridTemplateColumns","map","num","key","renderSquare","React","Component","Game","state","Array","fill","width","interval","emptySquares","setState","newSquares","from","length","Math","round","random","console","log","squaresCopy","clearInterval","setInterval","simulate","liveNeighborsCount","row","col","startSimulation","stopSimulation","populateRandom","clearGrid","color","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a7e17bc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//functional component for a single cell. Also determines color of cell (0: white, 1: pink).\nfunction Square(props){\n  let cellColor;\n  cellColor = props.value === 0 ? \"square\" : \"square-red\";\n  return (    \n    <button className={cellColor} onClick={props.onClick}>\n        {props.value}\n    </button>\n  )\n}\n\n//class component for the entire board.\nclass Board extends React.Component {\n\n  //renders a cell and determines what happens when it is clicked.\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]}\n                   onClick={()=> this.props.onClick(i)}/>;\n  }\n\n  //renders the entire board, by rendering each cell in a grid layout.\n  render() {    \n    var list = [];\n    for (var i = 0; i < 225; i++) {\n      list.push(i);\n    } \n\n    return (\n      <div style={\n        {display: 'grid',\n        gridTemplateColumns: `repeat(${15},34px)`}}>\n          {list.map(num => <div key={`${num}`}> {this.renderSquare(num)} </div>)}\n      </div>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  //the state of the game is housed in this component. \n  constructor(props) {\n    super(props);\n    \n    this.state = {\n        squares: Array(225).fill(0),\n        width: 15,\n        interval: null,\n    }\n  }\n\n  //used to remove any live cells from the board.\n  clearGrid(){\n    const emptySquares = Array(225).fill(0);\n    this.setState({squares: emptySquares});\n  }\n\n  //used to bring random cells to life\n  populateRandom(){\n    let newSquares = Array.from({length: 225}, () => Math.round(Math.random()));\n    console.log(newSquares);\n    this.setState({squares: newSquares});\n  }\n\n  //determines which cell is clicked and toggles it's value (0 <-> 1).\n  handleClick(i) {\n    const squares = this.state.squares;\n    let squaresCopy = [...squares];\n    squaresCopy[i] = squares[i] ? 0 : 1;\n    this.setState({squares: squaresCopy});\n  }\n\n  //used to initiate the game-of-life simulation\n  startSimulation(){\n    if(this.state.interval){\n      clearInterval(this.state.interval);\n    }\n    let interval = setInterval(() => this.simulate(),1000);\n    this.setState({interval: interval});\n  }\n\n  //used to stop the game-of-life simulation\n  stopSimulation(){\n    clearInterval(this.state.interval);\n  }\n\n  //enforces the rules of conway's game of life on the current board state.\n  simulate(){\n    const squares = this.state.squares;\n    let squaresCopy = [...squares];\n    const width = this.state.width; \n\n    //run one iteration of the game of life \n    let liveNeighborsCount = 0;\n    for(let row = 0; row < width ; row++){\n      for(let col = 0; col < width ; col++){\n        //looking at each of the eight neighbors and keeping track of the liveNeighbors\n        let topLeft = row>0 && col > 0 ? squares[width * (row - 1) + (col - 1)] : 0;\n        let left = row>0 ? squares[width * (row - 1) + col] : 0;\n        let bottomLeft = row>0 && col < width -1 ? squares[width * (row - 1) + (col + 1)]: 0;\n\n        let top = col > 0? squares[width * row + (col - 1)] : 0;\n        let bottom = col < width - 1? squares[width * row + (col + 1)] :0;\n\n        let topRight = row < width - 1 && col > 0 ? squares[width * (row + 1) + (col - 1)] : 0;\n        let right = row < width - 1? squares[width * (row + 1) + col] : 0 ;\n        let bottomRight = row < width - 1 && col < width - 1? squares[width * (row + 1) + (col + 1)] : 0;\n        liveNeighborsCount = topLeft + left + bottomLeft + top + bottom + topRight + right + bottomRight;\n\n        if(squares[width * row + col] === 1){//live cell\n          if(liveNeighborsCount < 2 || liveNeighborsCount > 3){\n            squaresCopy[width * row + col] = 0;//dies by underpopulation or overpopulation\n          }\n        }\n        else{\n          if(liveNeighborsCount === 3){\n            squaresCopy[width * row + col] = 1;//comes alive as if by reproduction\n          }\n        }\n        liveNeighborsCount = 0;\n      }\n    }\n    //update the grid with new grid configuration.\n    this.setState({squares: squaresCopy});\n  }\n\n  //used to render the entire game \n  render() {\n    return (\n      <div className=\"App\">\n      <h1 className=\"title\">Conway's Game Of Life</h1>\n      <button className=\"button-style-green\" onClick={() => this.startSimulation()}>Simulate</button>\n      <button className=\"button-style-red\" onClick={() =>  this.stopSimulation()}>Pause</button>\n      <button className=\"button-style-purple\" onClick={() =>  this.populateRandom()}>Random</button>\n      <button className=\"button-style-clear\" onClick={() =>  this.clearGrid()}>Clear</button>\n\n      <div style={{color: 'white'}}>\n        To start/resume the simulation, click on the \"simulate\" Button.\n      </div>\n\n      <div style={{color: 'white'}}>\n      To stop/pause the simulation, click on the \"Pause\" button.\n      </div>\n\n      <div style={{color: 'white'}}>\n      To generate a random grid configuration, click on the \"random\" button.\n      </div>\n\n      <div style={{color: 'white'}}>\n      To clear the board configuration, click on the \"clear\" button.\n      </div>\n\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={this.state.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}